trigger:
  branches:
    include:
      - main
      - feature/*
  paths:
    include:
      - src/*
    exclude:
      - README.md

parameters:
  - name: MajorVersion
    type: boolean
    default: false

pool:
  vmImage: 'windows-latest'

stages:
  - stage: Build
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
      - job: BuildJob
        steps:

          - task: PowerShell@2
            displayName: Install InvokeBuild module on build agent
            inputs:
              targetType: 'inline'
              pwsh: true
              script: |
                if (-not (Get-Module -Name InvokeBuild -ListAvailable)) {
                  Install-Module InvokeBuild -Force
                }
                Import-Module InvokeBuild

          - task: PowerShell@2
            displayName: Build PowerShell module
            inputs:
              targetType: 'inline'
              pwsh: true
              failOnStderr: false
              script: Invoke-Build -Task Build -Configuration Release -SourceLocation $(module.SourceLocation) -NewMajorVersion $${{ parameters.MajorVersion }}
              workingDirectory: $(System.DefaultWorkingDirectory)

          - task: NuGetCommand@2
            displayName: Create a NuGet package
            inputs:
              command: 'pack'
              packagesToPack: '$(System.DefaultWorkingDirectory)/build/**/*.nuspec'
              packDestination: '$(Build.ArtifactStagingDirectory)'

          - task: PublishBuildArtifacts@1
            displayName: Publish build artifact
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(module.Name)'
              publishLocation: Container

  - stage: Publish
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs:
    - job: PublishJob
      steps:

        - task: DownloadPipelineArtifact@2
          displayName: Download pipeline artifact
          inputs:
            buildType: 'current'
            artifactName: '$(module.Name)'
            itemPattern: '**/*.nupkg'
            targetPath: '$(Pipeline.Workspace)'

        - task: NuGetCommand@2
          displayName: Publish module to NuGet feed
          inputs:
            command: 'push'
            packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
            nuGetFeedType: 'internal'
            publishVstsFeed: '$(System.TeamProject)/$(module.FeedName)'